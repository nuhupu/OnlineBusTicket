using OnlineBusTicket.Models;
using OnlineBusTicket.Models.View;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity.Validation;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace OnlineBusTicket.Controllers
{
    public class EmployeeController : Controller
    {
        private SRCTravelAgenciesEntities db = new SRCTravelAgenciesEntities();
        Models.View.EmployeeView empView;
        // GET: Employee


        public ActionResult Index()
        {
            ViewBag.CounterList = new SelectList(db.Counters, "counId", "counName");

            var emp = new EmployeeController();
            var empList = emp.EmployeeList();
            return View(empList);
        }

        public IEnumerable<EmployeeView> EmployeeList()
        {
            List<EmployeeView> employeeViews = new List<EmployeeView>();

            var result = (from a in db.Employees
                          join b in db.Counters on a.eCounterId equals b.counId
                          select new
                          {
                              a,
                              b,
                          }
                          );

            foreach (var item in result)
            {
                empView = new EmployeeView();
                empView.employee = item.a;
                empView.counter = item.b;

                employeeViews.Add(empView);
            }

            return employeeViews;

        }

        private IEnumerable<Counter> GetAllCounters()
        {
            var allCounters = from c in db.Counters select c;
            return allCounters;
        }

        private IEnumerable<SelectListItem> GetSelectListCounters(IEnumerable<Counter> counters)
        {
            var selectList = new List<SelectListItem>();
            foreach (var item in counters)
            {
                selectList.Add(new SelectListItem
                {
                    Value = item.counId.ToString(),
                    Text = item.counName
                });
            }
            return selectList;
        }

        public Employee AutogeneratedId(string id, string username, string password, string name, DateTime birthday, string address, string email, string phone, int counter, byte role)
        {
            var result = (from a in db.Employees
                          orderby a.eId descending
                          select a.eId).FirstOrDefault();
            if (result == null)
            {
                id = "E" + DateTime.Now.ToString("yy") + "01";
            }
            else
            {
                var tempId = result;
                int last2Id = Convert.ToInt32(tempId.Substring(tempId.Length - 2));
                if (last2Id <= 8)
                {
                    id = "E" + DateTime.Now.ToString("yy") + "0" + (last2Id + 1).ToString();
                }
                else
                {
                    id = "E" + DateTime.Now.ToString("yy") + (last2Id + 1).ToString();
                }

            }
            Employee emp = new Employee { eId = id, eUsername = username, ePassword = password, eName = name, eBirthday = birthday, eAddress = address, eEmail = email, ePhone = phone, eCounterId = counter, eRole = role };

            return emp;
        }

        public ActionResult Create()
        {
            //ViewBag.CounterList = new SelectList(db.Counters, "counId", "counName");
            var emp = new EmployeeController();
            var counter = GetAllCounters();

            ViewBag.CounterList = emp.GetSelectListCounters(counter);
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Employee emp)
        {
            var employee = new EmployeeController();
            var counters = GetAllCounters();
            ViewBag.CounterList = employee.GetSelectListCounters(counters);
            ViewBag.tempId = "0000";

            try

            {
                var isExist = db.Employees.SingleOrDefault(a => a.eUsername.Equals(emp.eUsername));
                if (isExist == null)
                {
                    if (ModelState.IsValid)
                    {
                        var e = AutogeneratedId(emp.eId, emp.eUsername, emp.ePassword, emp.eName, emp.eBirthday, emp.eAddress, emp.eEmail, emp.ePhone, emp.eCounterId, emp.eRole);
                        db.Employees.Add(e);
                        db.SaveChanges();
                        return RedirectToAction("Index", "Employee");
                    }
                }

                else
                {
                    ModelState.AddModelError("", "This employee is already existed");
                }

            }
            catch (DataException)
            {
                ModelState.AddModelError("", "Unable to create employee.");
            }


            return View();
        }

        public ActionResult Edit(string id)
        {
            Employee result = db.Employees.SingleOrDefault(a => a.eId.Equals(id));
            if (result == null)
            {
                return HttpNotFound();
            }
            return View(result);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Employee emp)
        {
            try
            {
                Employee result = db.Employees.SingleOrDefault(a => a.eId.Equals(emp.eId));
                if (ModelState.IsValid)
                {
                    result.eUsername = emp.eUsername;
                    result.ePassword = emp.ePassword;
                    result.eName = emp.eName;
                    result.eBirthday = emp.eBirthday;
                    result.eAddress = emp.eAddress;
                    result.eEmail = emp.eEmail;
                    result.ePhone = emp.ePhone;
                    result.eCounterId = emp.eCounterId;
                    result.eRole = emp.eRole;
                    db.SaveChanges();
                    return RedirectToAction("Index", "Employee");
                }
                else
                {
                    ModelState.AddModelError("", "Please check if all fields are in correct formats.");
                }

            }
            catch (DataException)
            {
                ModelState.AddModelError("", "Unable to save changes.");
            }
            return View();
        }


        public ActionResult Deactive(string id)
        {
            try
            {
                Employee result = db.Employees.SingleOrDefault(a => a.eId.Equals(id));
                if (ModelState.IsValid)
                {
                    result.eRole = 0;
                    db.SaveChanges();
                    return RedirectToAction("Index", "Employee");
                }
                else
                {
                    ModelState.AddModelError("", "Please check if all fields are in correct formats.");
                }

            }
            catch (DataException)
            {
                ModelState.AddModelError("", "Unable to save changes.");
            }
            return View();
        }
    }
}